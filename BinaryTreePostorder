# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def postorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
          return []
          
        result = []
        
        self.helper(root, result)
        return result
        
    def helper(node, result):
		if not node:
			return
		
		self.helper(node.left, result)
		self.helper(node.right, result)
		result.append(node.val)
		
#  iteratively
    def postorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
	
	if not root:
		return []
	result = []
	
	stack = [(root, False)]
	
	while stack:
		currNode, flag = stack.pop()
		if currNode:
			if flag:
				result.append(currNode.val)
			else:
				stack.append((currNode, True))
				stack.append((currNode.right, False))
				stack.append((currNode.left, False))
	return result
		
	


        
        
